import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '3.1.2'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'pmd'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.1.0'
    id 'at.zierler.yamlvalidator' version '1.5.0'
    id 'nebula.lint' version '18.1.0'
    id 'nu.studer.credentials' version '3.0'
    id 'io.freefair.lombok' version '8.1.0'
    id 'name.remal.sonarlint' version '3.3.5'
}

group = 'io.github.tkasozi'
version = "${System.env.GITHUB_REF_NAME?:'0.0.1-SNAPSHOT'}"
description = 'el4j-observability'

sourceCompatibility = '17'

repositories {
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

configurations {
    bom
    annotationProcessor {
        extendsFrom bom
    }
    implementation {
        extendsFrom bom
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    bom platform(SpringBootPlugin.BOM_COORDINATES)

    api 'org.springframework.boot:spring-boot-starter-aop'

    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'

    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.slf4j:log4j-over-slf4j:2.0.7'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-aop'

    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform {
        excludeTags "integration"
    }
    finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform {
        includeTags "integration"
    }
    finalizedBy jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

gradleLint {
    // 'unused-exclude-by-dep' doesn't work with BOM dependency management: https://github.com/nebula-plugins/gradle-lint-plugin/issues/224
    rules  = ['archaic-wrapper']
    criticalRules = ['dependency-parentheses', 'overridden-dependency-version'] // <-- this will fail the build in the event of a violation
}

springBoot {
    buildInfo {
        properties {
            excludes = ['time']
        }
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    manifest {
        attributes("Implementation-Version": version)
        attributes("Implementation-Title": project.name)
    }
}

// reproducible builds, see https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

publishing {
        repositories {
            maven {
                name 'staging'
                credentials(org.gradle.api.credentials.PasswordCredentials)
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = "Event logging and observability"
                    description = "Observability: Logs, metrics, traces persisted and accessed along side your application"
                    url = "https://tkasozi.github.io/el4j-observability/"

                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id = "tkasozi"
                            name = "Talik Kasozi"
                            email = 'talik.aziizi@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/tkasozi/el4j-observability.git'
                        developerConnection = 'scm:git:ssh://github.com:tkasozi/el4j-observability.git'
                        url = 'https://github.com/tkasozi/el4j-observability/tree/main'
                    }
                }
            }
        }
}

signing {
    sign configurations.archives
    sign publishing.publications.mavenJava

    String signingKeyId = findProperty("signingKeyId")
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingKeyPassword")

//    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
}

publishMavenJavaPublicationToStagingRepository.dependsOn signArchives

assemble.doLast {
    project.jar.outputs.allOutputFiles.each { file ->
        println "artifact_path: " + file
    }
}

yamlValidator {
    searchPaths = ['src/']
    allowDuplicates = false
    searchRecursive = true
}

pmd {
    ruleSets = []
    ruleSetConfig = resources.text.fromFile("config/pmd/pmdruleset.xml")
}

spotbugs {
    excludeFilter = file("config/spotbugs/exclude.xml")
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.60
            }
        }
        failOnViolation true
    }
}

spotbugsMain {
    reports {
        xml {
            required.set(false)
        }
        html {
            required.set(true)
        }
    }
}

// Sonar needs access to libraries in order to do analysis
// in the sec-rel pipeline yaml, set:
// sonar_java_libraries: "build/sonar-libs/*.jar"
tasks.register('copySonarLibs', Copy) {
    from configurations.annotationProcessor
    into "$buildDir/sonar-libs"
}

build.finalizedBy copySonarLibs

//get rid of all the build and generated resources file
clean {
    delete "${projectDir}/src/main/resources/META-INF/el4j-logger"
}
